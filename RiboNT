#!/usr/bin/python3
import sys, os, getopt
def main ():
    usage = """
    RiboNT version 1.0 by Bo Song

    Usage:
        RiboNT [options]* --genome <reference> --gtf <annotation> --bam <alignment>

        <reference>     Sequence of reference genome (fasta)
        <annotation>    Annotation of reference genome (gtf)
        <alignment>     Alignment of RPFs (bam)

    Options:

        --start         Start codons (spearate by comma) [default: AUG]
        --pcov          Minimum RPF coverage of Psites (0-1) [default: 0]
        --nCores        Number of multiprocessors [default: 5]
        --outdir        Output directory [default: ./RiboNT]
        --prefix        Prefix of output files [default: ribont]

"""
    startCodon, outdir, prefix = 'AUG', 'RiboNT', 'ribont'
    nCores = 5
    pcov = 0.00000000001

    try:
        opts, args = getopt.getopt(sys.argv[1:], "h", ["help", "genome=", "gtf=", "bam=", "pcov=", "nCores=", "start=", "outdir=", "prefix="])
    except:
        sys.stdout.write(usage)
        sys.exit()

    if len(sys.argv[1:]) < 3:
        sys.stdout.write(usage)
        sys.exit()
    
    for opt, arg in opts:
        if opt in ('-h', '-help'):
            sys.stdout.write(usage)	    
            sys.exit()
        elif opt in ('--genome'):
            if arg is None:
                sys.stdout.write(usage)	
                sys.exit()
            else:
                sys.stdout.write("Genome is: "+arg+'\n')
                genome = arg
        elif opt in ('--gtf'):
            gtf = arg
            sys.stdout.write("GTF is: "+gtf+'\n')
        elif opt in ('--bam'):
            bam = arg
            sys.stdout.write("bam is: "+bam+'\n')
        elif opt in ('--startCodon'):
            startCodon = arg
            sys.stdout.write("Start codons are: "+startCodon+'\n')
        elif opt in ('--outdir'):
            outdir = arg
            sys.stdout.write("Output directory is: "+outdir+'\n')
        elif opt in ('--prefix'):
            prefix = arg
        elif opt in ('--pcov'):
            pcov = float(arg)
        elif opt in ('--nCores'):
            nCores = int(arg)

    genome = os.path.abspath(genome)
    gtf = os.path.abspath(gtf)
    bam = os.path.abspath(bam)

    Bin = sys.path[0]
    sys.path.append(Bin+'/bin')
    import ribont
    
    sys.stdout.write("RiboNT starts ..."+'\n')
    if not os.path.exists(outdir): os.makedirs(outdir)
    os.chdir(outdir)

    entropy = 1
    if not os.path.exists(prefix): ribont.StartExtract(gtf, prefix)
    if not os.path.exists(prefix+'_OffSet.txt'): ribont.OffSetExtract(bam, prefix+'.start.bed', prefix)

    sys.stdout.write("\tEvaluating RPFs qualities"+'\n')
    if os.path.exists(prefix+'.R.txt'): 
        if not os.path.exists('Plot'): os.makedirs('Plot')
        os.system('Rscript '+Bin+'/bin/multitaper.R '+prefix+'.R.txt')
        os.system('Rscript '+Bin+'/bin/metaplotHP.R '+prefix+'.L.txt '+prefix+'.R.txt')

    sys.stdout.write("\tExtracting genome-wide codon usages"+'\n')
    if not os.path.exists(prefix+'_codonUsage.pickle'): ribont.UsageExtract(genome,gtf,nCores,prefix)
    if not os.path.exists(prefix+'_dep.pickle'): entropy = ribont.PsiteAllocate(prefix+'.bed',prefix+'_OffSet.txt',prefix+'_multitaper.Freq.txt', prefix)
    
    sys.stdout.write("\tPredicting ORFs"+'\n')
    if not os.path.exists(prefix+'_orf.fa'): ribont.OrfFinder(entropy,startCodon,genome,gtf,pcov,nCores,prefix)
    
    sys.stdout.write("\tORF prediction completed. Outputting ..."+'\n')
    if not os.path.exists(prefix+'_sORF.gff'): 
        ribont.gffMaker(gtf, prefix+'.start.bed', prefix+'.stop.bed', prefix+'_orf.fa', prefix+'_sORF.gff',prefix+'_orf_aa.fa', prefix+'_orf_table.txt', prefix+'_summary.txt')

    os.system('rm *.bed *.pickle *.R.txt *.L.txt ' + prefix)
    sys.stdout.write("RiboNT completed"+'\n')

if __name__ == "__main__":
    main()
